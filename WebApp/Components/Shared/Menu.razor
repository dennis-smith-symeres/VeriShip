@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Components.Authorization

@using Telerik.Blazor.Components.Common.Icon
@implements IDisposable

<TelerikMenu Data="@MenuItems" Orientation="@Orientation"  >
    <ItemTemplate Context="item">
        @{
           
                <NavLink href="@item.Url"
                         target="@(IsInternalPage(item.Url) ? "" : "_blank")"
                         class="k-link k-menu-link "
                         ActiveClass="active"
                         Match="@(item.Url == "/" ? NavLinkMatch.All : NavLinkMatch.Prefix)">
                    @item.Text
                </NavLink>
          
        }
        @if (!string.IsNullOrEmpty(item.TelerikIcon))
        {
            <TelerikIcon Icon="@item.TelerikIcon"/>
        }        
    </ItemTemplate>
</TelerikMenu>



@code {

    [Parameter] public MenuOrientation Orientation { get; set; } = MenuOrientation.Horizontal;
    
    [Parameter]
    public List<Menu.MenuItem> MenuItems { get; set; }

    private MenuItem SelectedMenuItem { get; set; }

    protected override async void OnInitialized()
    {
       

        NavigationManager.LocationChanged += HandleLocationChanged;

        base.OnInitialized();
    }



    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        SelectedMenuItem = MenuItems.Find(item => CompareCurrentPageUrl(item.Url));
    
    }

    private void OnClick(MenuItem item)
    {
        if (IsInternalPage(item.Url))
        {
            SelectedMenuItem = item;
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
       // UserInfoClaims.OnChange -= UserInfoClaimsChanged;
    }

    private bool CompareCurrentPageUrl(string urlToCopmare)
    {
        return NavigationManager.Uri.Substring(NavigationManager.BaseUri.Length - 1).Equals(urlToCopmare);
    }

    private bool IsInternalPage(string url)
    {
        if (string.IsNullOrEmpty(url))
        {
            return false;
        }
        return !(url.StartsWith("https://") || url.StartsWith("http://"));
    }

    public class MenuItem
    {
        public string Text { get; set; }
        public string Url { get; set; }
        public string TelerikIcon { get; set; }
        public List<MenuItem> Items { get; set; }
    }

}