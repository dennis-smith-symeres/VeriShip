@page "/{projectNumber}/certifications"
@using Ardalis.Result
@using Humanizer
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Telerik.Windows.Documents.Spreadsheet.Expressions.Functions
@using VeriShip.Application.Features.Projects
@using VeriShip.Application.Features.Projects.Queries
@using VeriShip.Application.Features.QcRequests
@using VeriShip.Application.Features.QcRequests.Queries
@using VeriShip.Application.Features.Signals
@using VeriShip.Application.Features.Signals.Models
@using VeriShip.Application.Features.Signals.Queries
@using VeriShip.Domain.Entities.Projects
@using VeriShip.Domain.Entities.QcRequests
@using VeriShip.WebApp.Components.Pages.Projects.Certifications._
@using VeriShip.WebApp.Constants

<PageTitle>@ProjectNumber Certifications</PageTitle>

@if (QcRequestsResult.IsSuccess)
{
    <div>
    <RequestsTable Requests="@QcRequestsResult.Value"></RequestsTable>
    </div>
    <div>
        show shipments
    </div>
}
@if (QcRequestsResult.IsUnavailable())
{
    <TelerikLoader></TelerikLoader>
}
@if (!QcRequestsResult.IsSuccess && !QcRequestsResult.IsUnavailable())
{
    <h2>
        Journal @ProjectNumber
    </h2>
    <p>
        @QcRequestsResult.Status.Humanize()
    </p>
}

@code {

    [Parameter] public string ProjectNumber { get; set; } = string.Empty;
    [CascadingParameter] private Task<AuthenticationState>? AuthState { get; set; }
    [Inject] public required IQcRequestStore QcRequestStore { get; set; }
    [Inject] public required ProtectedLocalStorage LocalStorage { get; set; }

    private Result<IEnumerable<QcRequest>> QcRequestsResult { get; set; } = Result.Unavailable();

    protected override async Task OnParametersSetAsync()
    {
        if (AuthState != null)
        {
            var authState = await AuthState;
            QcRequestsResult = await QcRequestStore.Query(new GetRequests(ProjectNumber, authState.User));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (QcRequestsResult is { IsSuccess: true})
        {
            List<string> notebooks = [];
            try
            {
                var storedNotebooks = await LocalStorage.GetAsync<List<string>>(LocalStorageKeys.VerishipNotebooks);
                notebooks = storedNotebooks.Success ? storedNotebooks.Value : [];
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

            if (notebooks.Contains(ProjectNumber))
            {
                notebooks.Remove(ProjectNumber);
            }

            notebooks.Insert(0, ProjectNumber);
            notebooks = notebooks.Take(5).ToList();

            await LocalStorage.SetAsync(LocalStorageKeys.VerishipNotebooks, notebooks);
        }
    }


}