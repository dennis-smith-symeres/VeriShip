
@using Microsoft.AspNetCore.Components.Authorization
@using VeriShip.Application.Features.QcSpecifications
@using VeriShip.Application.Features.QcSpecifications.Commands
@using VeriShip.Application.Features.QcSpecifications.Queries


@using VeriShip.Domain.Entities.QCSpecifications
@using Sort = VeriShip.Application.Features.QcSpecifications.Commands.Sort



<TelerikGrid Data="@QcSpecifications"
             
             EditMode="@GridEditMode.Inline"
             OnUpdate="@UpdateHandler"
             OnCancel="@CancelHandler"
             OnCreate="@UpdateHandler"
             RowDraggable="true"
             Resizable="true"
             OnRowDrop="@((GridRowDropEventArgs<QcSpecification> args) => OnRowDropHandler(args))">
    <GridToolBarTemplate>
        <GridCommandButton Command="Add" Icon="@FontIcon.Plus">Add</GridCommandButton>
    </GridToolBarTemplate>
    <GridSettings>
        <GridRowDraggableSettings DragClueField="@DragClueField"></GridRowDraggableSettings>
    </GridSettings>

    <GridColumns>

        <GridColumn Field="@nameof(QcSpecification.Category)" Title="Category" Width="150px">
            <EditorTemplate>
                @{
                    CurrentlyEditedTeam = @context as QcSpecification;
                    <TelerikAutoComplete Data="@QcSpecifications.Select(x => x.Category)"
                                         @bind-Value="@CurrentlyEditedTeam!.Category"

                                         ShowClearButton="true"/>
                }
            </EditorTemplate>
        </GridColumn>
        @if (Table == Table.Tests)
        {
            <GridColumn Field="@nameof(QcSpecification.Technique)" Title="Technique" Width="150px" >
                <EditorTemplate>
                @{
                    CurrentlyEditedTeam = @context as QcSpecification;
                    <TelerikAutoComplete Data="@QcSpecifications.Select(x => x.Technique)"
                                         @bind-Value="@CurrentlyEditedTeam!.Technique"

                                         ShowClearButton="true"/>
                }
                    </EditorTemplate>
            </GridColumn>
        }
        <GridColumn Field="@nameof(QcSpecification.Acceptance)" Title="@(Table == Table.Tests ? "Acceptance" : "Label")" Width="150px">
            <EditorTemplate>
                @{
                    CurrentlyEditedTeam = @context as QcSpecification;
                    <TelerikAutoComplete Data="@QcSpecifications.Select(x => x.Acceptance)"
                                         @bind-Value="@CurrentlyEditedTeam!.Acceptance"

                                         ShowClearButton="true"/>
                }
            </EditorTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(QcSpecification.SpecialField)"
                    Title="SpecialField" 
               
                                  Width="150px"
                    Editable="false" ></GridColumn>

        <GridColumn Field="@nameof(QcSpecification.Values)">
            <Template>
                @{
                    var item = @context as QcSpecification;
                    if (item?.Values == null)
                    {
                        return;
                    }

                    <div>
                        @foreach (var value in item.Values)
                        {
                            @value<br/>
                        }
                    </div>}
            </Template>
            <EditorTemplate>
                @{
                    CurrentlyEditedTeam = @context as QcSpecification;

                    <div style="display: flex; flex-direction: column;">

                        @for (int i = 0; i < CurrentlyEditedTeam?.Values.Count; i++)
                        {
                            var i1 = i;
                            <TelerikAutoComplete Data="@QcSpecifications.SelectMany(x => x.Values)"
                                                 @bind-Value="@CurrentlyEditedTeam.Values[i1]"

                                                 ShowClearButton="true"/>
                        }
                        <TelerikButton OnClick="@AddValue">Add</TelerikButton>
                    </div>}
            </EditorTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(QcSpecification.AllowCustomValue)" width="100px">
            <Template>
                @{
                    var item = @context as QcSpecification;
                    if (item?.AllowCustomValue == true)
                    {
                        <TelerikFontIcon Icon="@FontIcon.Check"
                                         ThemeColor="@ThemeConstants.FontIcon.ThemeColor.Success"/>
                    }
                }
            </Template>
        </GridColumn>
        <GridColumn Field="@nameof(QcSpecification.IsDefault)" width="100px">
            <Template>
                @{
                    var item = @context as QcSpecification;
                    if (item?.IsDefault == true)
                    {
                        <TelerikFontIcon Icon="@FontIcon.Check"
                                         ThemeColor="@ThemeConstants.FontIcon.ThemeColor.Success"/>
                    }
                }

            </Template>
        </GridColumn>

        <GridColumn Field="@nameof(QcSpecification.Comment)"></GridColumn>
        <GridCommandColumn>
            <GridCommandButton Command="Save" Icon="@FontIcon.Save" ShowInEdit="true">Update</GridCommandButton>
            <GridCommandButton Command="Edit" Icon="@FontIcon.Pencil">Edit</GridCommandButton>
            <GridCommandButton Command="Cancel" Icon="@FontIcon.Cancel" ShowInEdit="true">Cancel</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>

@code {

    [Inject] IQcSpecificationStore QcSpecificationStore { get; set; } = null!;
    [CascadingParameter] private Task<AuthenticationState>? AuthState { get; set; }
 
    [Parameter] public Table Table { get; set; }
    [Parameter] public List<QcSpecification> QcSpecifications { get; set; } = [];

    private QcSpecification? CurrentlyEditedTeam { get; set; }
    private string DragClueField { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        DragClueField = Table == Table.GeneralInformation ? nameof(QcSpecification.Acceptance) : nameof(QcSpecification.Technique);
        await LoadChecks();
    }

    private async Task LoadChecks()
    {
        var query = await QcSpecificationStore.Query(new GetAll()
        {
            Table = Table
        }, CancellationToken.None);
  

            QcSpecifications = query.Value.ToList();
      
    }

    async Task UpdateHandler(GridCommandEventArgs args)
    {
        if (args.Item is not QcSpecification data || AuthState == null)
        {
            return;
        }

        data.Table = Table;

        var authState = await AuthState;
        if (authState.User.Identity?.Name != null)
        {
           var result = await QcSpecificationStore.Handle(new Upsert(authState.User.Identity.Name, data), CancellationToken.None);
           
        }


        await LoadChecks();
    }

    void AddValue()
    {
        CurrentlyEditedTeam?.Values.Add("");
    }

  

    private void CancelHandler(GridCommandEventArgs obj)
    {
        CurrentlyEditedTeam = null;
    }

    private async Task OnRowDropHandler(GridRowDropEventArgs<QcSpecification> args)
    {
        //The data manipulations in this example are to showcase a basic scenario.
        //In your application you should implement them as per the needs of the project.

        QcSpecifications.Remove(args.Item);

        var destinationItemIndex = QcSpecifications.IndexOf(args.DestinationItem);

        if (args.DropPosition == GridRowDropPosition.After)
        {
            destinationItemIndex++;
        }

        QcSpecifications.Insert(destinationItemIndex, args.Item);
        if (AuthState != null)
        {
            var authState = await AuthState;
            var order = QcSpecifications.Select(x => x.Id).ToArray(); // Current ID sort order
            QcSpecifications = QcSpecifications
                .GroupBy(item => item.Category) // Group items by Category
                .SelectMany(group => group.OrderBy(item =>
                {
                    var index = Array.IndexOf(order, item.Id);
                    return index < 0 ? int.MaxValue : index; 
                }))
                .ToList();

            if (authState.User.Identity?.Name != null)
            {
                var command = new Sort(authState.User.Identity.Name, Table, QcSpecifications.Select(x => x.Id).ToArray());
                await QcSpecificationStore.Handle(command, CancellationToken.None);
            }
        }


        await LoadChecks();
    }


}