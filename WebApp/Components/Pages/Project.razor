@page "/{projectNumber}"
@using Ardalis.Result
@using Humanizer
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Telerik.Windows.Documents.Spreadsheet.Expressions.Functions
@using VeriShip.Application.Features.Projects
@using VeriShip.Application.Features.Projects.Queries
@using VeriShip.Application.Features.QcRequests
@using VeriShip.Application.Features.QcRequests.Queries
@using VeriShip.Application.Features.Signals
@using VeriShip.Application.Features.Signals.Models
@using VeriShip.Application.Features.Signals.Queries
@using VeriShip.Domain.Entities.Projects
@using VeriShip.Domain.Entities.QcRequests
@using VeriShip.WebApp.Components.Projects
@using VeriShip.WebApp.Components.ProjectSettings


@using VeriShip.WebApp.Constants
@inject NavigationManager NavigationManager

<PageTitle>@ProjectNumber</PageTitle>
<TelerikToolBar>

    <ToolBarTemplateItem>
       
    </ToolBarTemplateItem>
    <ToolBarSpacer></ToolBarSpacer>
    <ToolBarTemplateItem>
      <MenuSettings ProjectNumber="@ProjectNumber"></MenuSettings>
    </ToolBarTemplateItem>
  
</TelerikToolBar>
<div class="content">
    
<ResultTemplate T="Domain.Entities.Projects.Project" Result="ProjectResult">
    <div>
        <h3>Certification requests</h3>
      <RequestsTable ProjectNumber="@ProjectNumber"></RequestsTable>
    </div>

</ResultTemplate>

</div>
<h3>Shipments</h3>

@code {

    [Parameter] public string ProjectNumber { get; set; } = string.Empty;
    [CascadingParameter] private Task<AuthenticationState>? AuthState { get; set; }
    
    [Inject] public required IProjectStore ProjectStore { get; set; }
    [Inject] public required ProtectedLocalStorage LocalStorage { get; set; }
    
    private Result<Domain.Entities.Projects.Project> ProjectResult { get; set; } = Result.Unavailable();
   
    protected override async Task OnParametersSetAsync()
    {
        if (AuthState != null)
        {
            var authState = await AuthState;
            ProjectResult = await ProjectStore.Query(new GetProject(ProjectNumber, authState.User));
            
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ProjectResult is { IsSuccess: true })
        {
            List<string> notebooks = [];
            try
            {
                var storedNotebooks = await LocalStorage.GetAsync<List<string>>(LocalStorageKeys.VerishipNotebooks);
                notebooks = storedNotebooks.Success ? storedNotebooks.Value : [];
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

            if (notebooks.Contains(ProjectNumber))
            {
                notebooks.Remove(ProjectNumber);
            }

            notebooks.Insert(0, ProjectNumber);
            notebooks = notebooks.Take(5).ToList();

            await LocalStorage.SetAsync(LocalStorageKeys.VerishipNotebooks, notebooks);
        }
    }


}