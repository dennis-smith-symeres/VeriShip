@page "/Profile"
@using System.Security.Claims
@using Ardalis.Result
@using Humanizer
@using Microsoft.AspNetCore.Components.Authorization
@using VeriShip.Application.Common
@using VeriShip.WebApp.Services
@implements IDisposable
<TelerikToolBar>
   

  
    <ToolBarTemplateItem>
        <b>Profile</b>
    </ToolBarTemplateItem>
    <ToolBarSpacer></ToolBarSpacer>
    
</TelerikToolBar>


<div class="content center" >

    <TelerikCard>
        <CardHeader>
            <CardTitle>
                Profile
            </CardTitle>
        </CardHeader>
        <CardBody>
            @if (UserResult.IsSuccess)
            {
            
                
                <table class="profile-table">
                    <tr>
                        <td><label>Name</label></td>
                        <td><span>@UserResult.Value.DisplayName</span></td>
                    </tr>
                    <tr>
                        <td><label>Identity</label></td>
                        <td><span>@UserResult.Value.Name</span></td>
                    </tr>
                    <tr>
                        <td><label>Access</label></td>
                        <td>
                            <CheckIcon Checked="@UserResult.Value.HasAccess"/>
                        </td>
                    </tr>
                    <tr>
                        <td><label>QC officer</label></td>
                        <td>
                            <CheckIcon Checked="@UserResult.Value.IsQc"/>
                        </td>
                    </tr>
                    <tr>
                        <td><label>Administrator</label></td>
                        <td>
                            <CheckIcon Checked="@UserResult.Value.IsAdmin"/>
                        </td>
                    </tr>
                </table>
            } 
            @if (!UserResult.IsSuccess)
            {
                <p>
                    @UserResult.Status.Humanize()
                </p>
            }


        </CardBody>

    </TelerikCard>
    <TelerikCard>
        <CardHeader>
            <CardTitle>
                Connected users
            </CardTitle>
        </CardHeader>
        <CardBody>

            <ul>
                @foreach (var user in UsersStateContainer.UsersByConnectionId)
                {
                    <li>@user.Value</li>
                }

            </ul>

        </CardBody>
    </TelerikCard>
</div>


@code {

    [Inject] public IUsersStateContainer UsersStateContainer { get; set; }
    [CascadingParameter] private Task<AuthenticationState>? AuthState { get; set; }
    private IEnumerable<Claim> Claims { get; set; } = [];

    public Result<AuthenticatedUser> UserResult { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UsersStateContainer.OnChange += OnMyChangeHandler;
        var auth = await AuthState;
        UserResult = auth.User.ToUserResult();
    }


    public void Dispose()
    {
        UsersStateContainer.OnChange -= OnMyChangeHandler;
    }

    private async void OnMyChangeHandler()
    {
        // invoke on ui thread
        await InvokeAsync(StateHasChanged);
    }



}
