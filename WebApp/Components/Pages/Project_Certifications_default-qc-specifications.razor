@page "/{ProjectNumber}/certifications/default-qc-specifications"
@using System.Collections.ObjectModel
@using System.Security.Claims
@using Ardalis.Result
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Telerik.SvgIcons
@using VeriShip.Application.Features.Exports
@using VeriShip.Application.Features.Exports.Queries
@using VeriShip.Application.Features.Projects
@using VeriShip.Application.Features.Projects.Commands
@using VeriShip.Application.Features.Projects.Queries
@using VeriShip.Application.Features.QcSpecifications
@using VeriShip.Application.Features.QcSpecifications.Queries
@using VeriShip.Domain.Entities.QCSpecifications
@using VeriShip.Infrastructure.Services
@using VeriShip.Infrastructure.Services.Model.WordProcessor
@using VeriShip.WebApp.Components.ProjectSettings
@using VeriShip.WebApp.Constants
@using VeriShip.WebApp.Models
@using Result = VeriShip.Domain.Entities.QCSpecifications.Result
@using Table = VeriShip.Domain.Entities.QCSpecifications.Table
@inject IExportStore ExportStore


<PageTitle>@ProjectNumber</PageTitle>


<TelerikToolBar>

    <ToolBarTemplateItem>
        <b>Default qc specifications</b>
    </ToolBarTemplateItem>
    <ToolBarButton Enabled="@CanSave" OnClick="@Save" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Save
    </ToolBarButton>
    <ToolBarSpacer></ToolBarSpacer>
    <ToolBarTemplateItem>
        <MenuSettings ProjectNumber="@ProjectNumber"></MenuSettings>
    </ToolBarTemplateItem>

</TelerikToolBar>

<QcSpecificationSelector
    AllQcSpecifications="@QcSpecitications"
    CoATable="@Table.GeneralInformation"
    @bind-Visible="@DialogGeneralIngormationsIsVisible"
    OnSelectedChanged="@QcSpecificationSelectionChanged"
    SelectedIds="@GridData.Where(x=>x.Active).Select(x => x.QcSpecificationId)">
</QcSpecificationSelector>

    <TelerikSplitter

        Orientation="@SplitterOrientation.Horizontal">
        <SplitterPanes >
            <SplitterPane Collapsible="true" Size="50%" >
                <ResultTemplate T="IOrderedEnumerable<Result>" Result="QCSpecificationResult" >

                    <div style="display: flex; flex-direction: column;gap: 1rem; padding: 1rem">
                        
                    <EditQcResults
                        OnChange="@UpdateResult"
                        OnChangeIsInEditMode="@OnChangeIsInEditMode"
                        CheckResults="GridData.Where(x => x is { QcSpecification.Table: Table.GeneralInformation })"
                        CoATable="Table.GeneralInformation">
                        <GridColumn Field="QcSpecification.Category" Title="Category" Width="100px"></GridColumn>
                        <GridColumn Field="QcSpecification.Acceptance" Title="Label" Width="100px"></GridColumn>
                    </EditQcResults>
                    <TelerikButton
                        FillMode="@ThemeConstants.Button.FillMode.Outline"
                        OnClick="@(() => DialogGeneralIngormationsIsVisible = true)">
                        Add / Remove General information
                    </TelerikButton>
                    <EditQcResults
                        OnChange="@UpdateResult"
                        OnChangeIsInEditMode="@OnChangeIsInEditMode"
                        CheckResults="GridData.Where(x => x is { QcSpecification.Table: Table.Tests })"
                        CoATable="Table.Tests">
                        <GridColumn Field="QcSpecification.Category" Title="Test" Width="100px"></GridColumn>
                        <GridColumn Field="QcSpecification.Technique" Title="Technique" Width="100px"></GridColumn>
                        <GridColumn Field="QcSpecification.Acceptance" Title="Acceptance" Width="150px"></GridColumn>
                    </EditQcResults>
                    </div>


                </ResultTemplate>
            </SplitterPane>

            <SplitterPane Collapsible="true" >
                <ResultTemplate T="byte[]" Result="PreviewResult">
                    <TelerikPdfViewer
                        Zoom="@PdfZoom"
                        ZoomChanged="@OnPdfZoomChanged"
                        Width="100%"
                        Height="800px"
                        Data="@PreviewResult.Value">
                        <PdfViewerToolBar>
                            <PdfViewerToolBarZoomTool/>
                            <PdfViewerToolBarPagerTool/>
                            <PdfViewerToolBarSpacer/>
                            <PdfViewerToolBarDownloadTool/>
                        </PdfViewerToolBar>
                    </TelerikPdfViewer>
                </ResultTemplate>
            </SplitterPane>
        </SplitterPanes>
    </TelerikSplitter>


@code {

    [Parameter] public string ProjectNumber { get; set; } = string.Empty;
    [CascadingParameter] public required Task<AuthenticationState> AuthState { get; set; }
    
    [Inject] public required IProjectStore ProjectStore { get; set; }
    [Inject] public required IQcSpecificationStore QcSpecificationStore { get; set; }
    [Inject] public required ProtectedLocalStorage LocalStorage { get; set; }

    public bool DialogGeneralIngormationsIsVisible { get; set; }
    public Ardalis.Result.Result<IOrderedEnumerable<Result>> QCSpecificationResult { get; set; } = Ardalis.Result.Result<IOrderedEnumerable<Result>>.Unavailable();
    public List<QcSpecification> QcSpecitications { get; set; } = [];
    public List<Result> Results { get; set; } = [];
    private bool GridIsInEditMode { get; set; }
    private ObservableCollection<QcResultEditModel> GridData { get; set; } = new();
    public byte[] FileData { get; set; }

    
    private decimal PdfZoom { get; set; } = 1.00m;

    private bool CanSave => !GridIsInEditMode && GridData.Any(x => x.IsChanged || x.IsNew || x.IsDeleted);

    protected override async Task OnInitializedAsync()
    {
        var qcSpecsGeneral = await QcSpecificationStore.Query(new GetAll()
        {
            Table = Table.GeneralInformation
        });
        var qcSpecsTest = await QcSpecificationStore.Query(new GetAll()
        {
            Table = Table.Tests
        });
        if (qcSpecsTest.IsSuccess && qcSpecsGeneral.IsSuccess)
        {
            QcSpecitications.AddRange(qcSpecsGeneral.Value);
            QcSpecitications.AddRange(qcSpecsTest.Value);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var pdfZoom = await LocalStorage.GetAsync<decimal>(LocalStorageKeys.VerishipPdfZoom);
        PdfZoom = pdfZoom.Success ? pdfZoom.Value : decimal.One;
    }

    private async Task OnPdfZoomChanged(decimal newZoom)
    {
        PdfZoom = newZoom;
        await LocalStorage.SetAsync(LocalStorageKeys.VerishipPdfZoom, newZoom);
       
    }
    private async Task QcSpecificationSelectionChanged(IEnumerable<int> ids)
    {
 
 
        foreach (var id in ids)
        {
            var isShown = GridData
                .FirstOrDefault(x => x.QcSpecificationId == id);
            var result = Results.FirstOrDefault(x => x.QcSpecificationId == id); 
            //TODO: check logic
            if (isShown is null)
            {
                GridData.Add(new QcResultEditModel()
                {
                    Id = result?.Id ?? -1,
                    QcSpecificationId = id,
                    Value = result?.Value,
                    Active = true,
                    IsNew = result == null,
                    QcSpecification = QcSpecitications.FirstOrDefault(x=>x.Id == id),
                });
            }
        }

        var idsToRemove = new List<QcResultEditModel>();
        foreach (var model in GridData)
        {
            var hasId = ids.Contains(model.QcSpecificationId);
            model.Active = hasId;
            model.IsDeleted = false;
            if (hasId) continue;
            
            var result = Results.FirstOrDefault(r => r.QcSpecificationId == model.QcSpecificationId);
            if (result != null  )
            {
                if (result.Active)
                {
                    model.IsDeleted = true;
                }
            }
            else
            {
                idsToRemove.Add(model);
            }
        }

        foreach (var b in idsToRemove)
        {
            GridData.Remove(b);
        }
        
        await SetPreviewCoA();
    }
    
    async Task LoadData()
    {
        var authState = await AuthState;
        QCSpecificationResult = await ProjectStore.Query(new GetDefaultQcSpecifications(ProjectNumber, authState.User));
        if (!QCSpecificationResult.IsSuccess)
        {
            return;
        }

        Results = QCSpecificationResult.Value.ToList();

        var gridata = Results.Select(itm => QcResultEditModel.From(itm, QcSpecitications));
        GridData = new ObservableCollection<QcResultEditModel>(gridata.Where(x => x.QcSpecification != null));
        await SetPreviewCoA();
    }

    private async Task Save()
    {
        var authState = await AuthState;
        var result = await ProjectStore.Handle(new SaveDefaultQcSpecifications(
            ProjectNumber,
            authState.User,
            GridData.Where(x => x.Active).Select(QcResultEditModel.ToResult)
        ));
        if (result.IsSuccess)
        {
            await LoadData();
        }
    }

    private async Task SetPreviewCoA()
    {
        var auth = await AuthState;
        var previewRequest = new PreviewCoA(string.Empty, auth.User)
        {
            Results = GridData.Where(x => x.Active),
        };
        PreviewResult = await ExportStore.Handle(previewRequest);
      
    }

    public Result<byte[]> PreviewResult { get; set; } = Result<byte[]>.Unavailable();

    private async Task UpdateResult(QcResultEditModel obj)
    {
        var target = GridData.FirstOrDefault(x => x.QcSpecificationId == obj.QcSpecificationId);
        if (target == null)
        {
            return ;
        }

        target.Value = obj.Value;
        PreviewResult = Result<byte[]>.NoContent();
        StateHasChanged();
      
        
        return;
    }

    private void OnChangeIsInEditMode(bool obj)
    {
        GridIsInEditMode = obj;
    }

  

}
