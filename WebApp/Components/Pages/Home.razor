@page "/"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using VeriShip.Application.Features.Projects
@using VeriShip.Application.Features.Projects.Queries
@using VeriShip.Application.Features.Signals
@using VeriShip.WebApp.Constants
@using VeriShip.WebApp.Services

<PageTitle>Home</PageTitle>
<div class="content">
    <TelerikLoaderContainer 
        Visible="@IsLoading" 
        Text="Checking project number"
        >
    </TelerikLoaderContainer>
    <TelerikForm 
        Model="@ProjectModel"
        OnValidSubmit="@OnValidSubmitHandler"
        ValidationMessageType="@FormValidationMessageType.Tooltip">
        <FormValidation>
            <DataAnnotationsValidator></DataAnnotationsValidator>
        </FormValidation>
        <FormItems>
            <FormItem Field="@nameof(GetProject.ProjectNumber)" LabelText="ProjectNumber"/>
        </FormItems>
    </TelerikForm>
    <div>

        <label>Previous project numbers</label>

        @foreach (var notebook in Notebooks)
        {
            <p>
                <a href="/@notebook/certifications">@notebook</a>
            </p>
        }
    </div>
</div>



@code {
   

    [Inject] public required NavigationManager NavigationManager  { get; set; }
    [Inject] public required ProtectedLocalStorage LocalStorage { get; set; }
    [Inject] public required ISignalsStore SignalsStore { get; set; }
    [Inject] public required INotifications Notifications { get; set; }
  
    [CascadingParameter] private Task<AuthenticationState>? AuthState { get; set; }
    
    private GetProject ProjectModel { get; set; } = new()
    {
        User = string.Empty,
        ProjectNumber = string.Empty
    };

    private bool IsLoading
    {
        get;
        set;
    } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
        if (firstRender)
        {
            if (AuthState != null)
            {
                var authState = await AuthState;
                if (authState.User.Identity?.Name != null)
                {
                    ProjectModel.User = authState.User.Identity?.Name;
                  
                }
            }
            try
            {
                
                var storedNotebooks = await LocalStorage.GetAsync<List<string>>(LocalStorageKeys.VerishipNotebooks);
                Notebooks = storedNotebooks.Success ? storedNotebooks.Value ?? [] : [];
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

            IsLoading = false;
            StateHasChanged();
        }
    }


    private List<string> Notebooks { get; set; } = [];

    private async Task OnValidSubmitHandler(EditContext editContext)
    {
        IsLoading = true;
        StateHasChanged();
        if (AuthState != null)
        {
            var authState = await AuthState;
            if (authState.User.Identity?.Name != null)
            {
                var notebook = await SignalsStore.Query(new GetNotebook(ProjectModel.ProjectNumber, authState.User.Identity?.Name));
                if (notebook.IsSuccess)
                {
                    NavigationManager.NavigateTo($"/{ProjectModel.ProjectNumber}/certifications");
                   
                } else
                {
                    Notifications.Show(new()
                    {
                        ThemeColor =  ThemeConstants.Notification.ThemeColor.Error,
                        Text =  $"Journal {ProjectModel.ProjectNumber} was {notebook.Status}"
                   
                    });
                }
            }
        }
        IsLoading = false;
        StateHasChanged();
        
    
    }

   

}